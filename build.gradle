buildscript {
  apply plugin: 'hyperskill'

  repositories {
    google()
    mavenCentral()
//    maven { url 'https://packages.jetbrains.team/maven/p/hyperskill-hs-test/maven'}
    maven { url 'https://jitpack.io' }
  }

  dependencies {
    classpath 'com.github.hyperskill:hs-gradle-plugin:release-SNAPSHOT'
    classpath 'com.android.tools.build:gradle:7.3.1'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.0"
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }
}

allprojects {
  apply plugin: 'hyperskill'

  repositories {
    google()
    mavenCentral()
  }

  afterEvaluate {
    if (extensions.findByName('android') != null) {
      android {
        testOptions {
          unitTests {
            includeAndroidResources = true
            all {
              afterTest { TestDescriptor test, TestResult result ->
                if (result.resultType == TestResult.ResultType.FAILURE) {
                  def message = result.exception?.message ?: "Wrong answer"
                  def lines = message.readLines()
                  println "#educational_plugin FAILED + " + lines[0]
                  lines.subList(1, lines.size()).forEach { line ->
                    println "#educational_plugin" + line
                  }
                  // we need this to separate output of different tests
                  println()
                }
              }
            }
          }
        }

        defaultConfig {
          testInstrumentationRunner 'com.edu.AndroidEduTestRunner'
        }
      }

      dependencies {
        def robolectric = hs.android.robolectricVersion
        testImplementation "org.robolectric:robolectric:$robolectric"

        def junit = hs.android.lib.junit
        testImplementation "junit:junit:$junit"

        testImplementation 'androidx.test.ext:junit:1.1.5'
        testImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        testImplementation "androidx.compose.ui:ui-test-junit4:1.3.3"
      }
    }
  }
}
